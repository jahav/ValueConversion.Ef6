<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ValueConversion.Ef6</name>
    </assembly>
    <members>
        <member name="T:ValueConversion.Ef6.CastMap">
            <summary>
            A class for holding and looking up information what type was converted into which type in the expression.
            </summary>
        </member>
        <member name="P:ValueConversion.Ef6.ConversionConfiguration.IsAllowedForColumn">
            <summary>
            Gets or sets a delegate that determines if a CLR type can be used as an alias of a DB column type.
            This is heavily dependent on EF6, see allowed casts CLR types in <c>ExpressionConverter.GetCastTargetType</c>.
            For primitive types (that is not every type, e.g. ), see EF6 source <c>ClrProviderManifest.TryGetPrimitiveTypeKind</c> for a list of allowed types in EF6 as a column.
            </summary>
            <remarks>
            This has a preference, if this says it can be materialized, it is put into the mediator type.</remarks>
        </member>
        <member name="P:ValueConversion.Ef6.ConversionConfiguration.ShouldMediateTargetProperty">
            <summary>
            Gets or sets a delegate that determines if a mediator should contain a propery with same name as the target.
            </summary>
        </member>
        <member name="P:ValueConversion.Ef6.ConversionConfiguration.MaxRecursion">
            <summary>
            Gets or sets a recursion limit that detects endless cycles, e.g. when looking for a connected graph to translate.
            First level is 0, once level is greater that MaxRecursion, throw.
            </summary>
        </member>
        <member name="M:ValueConversion.Ef6.GraphSearcher.SearchGraph(System.Type)">
            <summary>
            Depth first search.
            </summary>
        </member>
        <member name="T:ValueConversion.Ef6.MaterializedTypesVisitor">
            <summary>
            A visitor that goes through a query expression and finds all types used in the query.
            </summary>
        </member>
        <member name="P:ValueConversion.Ef6.MaterializedTypesVisitor.MaterializedTypes">
            <summary>
            Gets the list of types used in the materialization.
            </summary>
        </member>
        <member name="F:ValueConversion.Ef6.MediatorMapper._mediatorTypeMaps">
            <summary>
            Key is target type.
            </summary>
        </member>
        <member name="T:ValueConversion.Ef6.MediatorTypeBuilder">
            <summary>
            A builder that creates new anonymous types based on domain entities.
            The mediator type will have same properties as EF entity, but their type
            will be a primitive type (according to Edm), not domain type (e.g. <c>string</c>
            instead of <c>SerialNumber</c>).
            </summary>
        </member>
        <member name="T:ValueConversion.Ef6.MediatorTypeMap">
            <summary>
            A representation of map target - mediator.
            Inheritance not counted, table per concrete type.
            </summary>
        </member>
        <member name="M:ValueConversion.Ef6.MediatorTypeMap.ConvertToMediator(System.Reflection.PropertyInfo)">
            <summary>
            Convert a property of the target type into a property of the mediator type.
            </summary>
            <param name="propertyInfo">A property of a target type.</param>
            <exception cref="T:System.InvalidOperationException">Property is not present on the mediator.</exception>
        </member>
        <member name="T:ValueConversion.Ef6.TargetTypeGraph">
            <summary>
            This finds the graph, all nodes and edges that must be translated.
            It doesn't do the translation, it only finds what must be translated.
            </summary>
        </member>
        <member name="F:ValueConversion.Ef6.TargetTypeGraph._graph">
            <summary>
            Key is node, represented by type, value are directed graphs edges (name of member and type target).
            Nodes should be translated. Edges can point either to a node or a <see cref="F:ValueConversion.Ef6.TargetTypeGraph._keep"/>.
            </summary>
        </member>
        <member name="F:ValueConversion.Ef6.TargetTypeGraph._keep">
            <summary>
            Types that shouldn't be translated, e.g. <see cref="T:System.Int32"/>, <see cref="T:System.String"/>.
            <see cref="F:ValueConversion.Ef6.TargetTypeGraph._graph"/> doesn't have nodes for these types, but edges point to them.
            </summary>
        </member>
        <member name="P:ValueConversion.Ef6.TargetTypeGraph.Node.ColumnMembers">
            <summary>
            Gets properties that are directly on the node, not navigation properties (represented by the edge).
            </summary>
        </member>
        <member name="M:ValueConversion.Ef6.ValueConversionExtensions.ProjectToList``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},ValueConversion.Ef6.MediatorMapper)">
            <summary>
            The extension method that adds a select as a last extension method and hydrates the result through proxy.
            </summary>
            <typeparam name="TSource">Type of the source object from the <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type that <paramref name="selectExpression"/> transforms the <paramref name="source"/> into.</typeparam>
        </member>
    </members>
</doc>
